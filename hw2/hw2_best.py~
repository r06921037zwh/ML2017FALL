import numpy as np
import pandas as pd
import sys
from sklearn.naive_bayes import GaussianNB
from sklearn import cross_validation

def load_input():
    X_train = pd.read_csv(sys.argv[3], sep=',', header=0)
    Y_train = pd.read_csv(sys.argv[4], sep=',', header=0)
    X_test = pd.read_csv(sys.argv[5], sep=',', header=0)

    # To np array
    X_train = np.array(X_train)
    Y_train = np.array(Y_train)
    X_test = np.array(X_test)
    return (X_train, Y_train, X_test)

def normalize(X_all, X_test):
    # Feature normalization with train and test X
    X_train_test = np.concatenate((X_all, X_test))
    mu = (sum(X_train_test) / X_train_test.shape[0])
    sigma = np.std(X_train_test, axis=0)
    mu = np.tile(mu, (X_train_test.shape[0], 1))
    sigma = np.tile(sigma, (X_train_test.shape[0], 1))
    X_train_test_normed = (X_train_test - mu) / sigma

    # Split to train, test again
    X_all = X_train_test_normed[0:X_all.shape[0]]
    X_test = X_train_test_normed[X_all.shape[0]:]
    return X_all, X_test

if __name__ == '__main__':
    X_train, Y_train, X_test = load_input()
    X_train, X_test = normalize(X_train, X_test)
    Y_train = Y_train.ravel()
    #print(Y_train.shape)
    #print(X_train.shape,Y_train.shape)

    #print(X_test.shape)
    X_train, X_test, Y_train, Y_test = cross_validation.train_test_split(X_train, Y_train, test_size=0.25, random_state=5)   
    classifier_gaussiannb = GaussianNB()
    classifier_gaussiannb.fit(X_train,Y_train)
    y_pred = classifier_gaussiannb.predict(X_train)
    accuracy = 100.0 * (Y_train == y_pred).sum() / X_train.shape[0]
    print("Accuracy of the NB classifier: ", round(accuracy,2)) 


